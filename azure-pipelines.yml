# azure-pipelines.yml
trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  # ---- Cloudsmith settings ----
  CS_WORKSPACE: 'globex-innovations'   # was CS_ORG
  CS_REPO: 'acme-nonprod'
  CS_SERVICE_SLUG: 'ci_acme_service'   # service account slug (username for Basic Auth)

  # ---- npm scope (change to your real scope, e.g., @acme) ----
  NPM_SCOPE: '@your-scope'
  # Optional: a single package to fetch explicitly after npm ci
  NPM_SINGLE_PACKAGE: '@your-scope/some-package@latest'

# Define CLOUDSMITH_API_KEY as a SECRET variable in the pipeline UI/Library (do NOT hardcode)

steps:
- checkout: self

# ===== Python: install deps from Cloudsmith =====
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.12'
  displayName: "Use Python 3.12"

- bash: |
    set -eo pipefail
    python -m pip install --upgrade pip
    pip install -r requirements.txt \
      --index-url "https://${CS_SERVICE_SLUG}:${CLOUDSMITH_API_KEY}@dl.cloudsmith.io/basic/${CS_WORKSPACE}/${CS_REPO}/python/simple/"
  displayName: "pip install from Cloudsmith"
  env:
    CS_WORKSPACE: $(CS_WORKSPACE)
    CS_REPO: $(CS_REPO)
    CS_SERVICE_SLUG: $(CS_SERVICE_SLUG)
    CLOUDSMITH_API_KEY: $(CLOUDSMITH_API_KEY)   # secret

- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: "Use Node.js 20"

- bash: |
    set -eo pipefail
    npm --version

    # Registry + auth for your Cloudsmith workspace
    npm config set ${NPM_SCOPE}:registry "https://npm.cloudsmith.io/${CS_WORKSPACE}/${CS_REPO}/"
    npm config set //npm.cloudsmith.io/${CS_WORKSPACE}/${CS_REPO}/:_authToken="${CLOUDSMITH_API_KEY}"

    if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
      echo "Lockfile found → running npm ci"
      npm ci
    else
      echo "No lockfile → running npm install"
      npm install
    fi

    # Optional: fetch one explicit package to verify connectivity
    if [ -n "${NPM_SINGLE_PACKAGE}" ]; then
      npm install "${NPM_SINGLE_PACKAGE}"
    fi
  displayName: "npm install from Cloudsmith (scoped)"
  env:
    CS_WORKSPACE: $(CS_WORKSPACE)
    CS_REPO: $(CS_REPO)
    CLOUDSMITH_API_KEY: $(CLOUDSMITH_API_KEY)
    NPM_SCOPE: $(NPM_SCOPE)
    NPM_SINGLE_PACKAGE: $(NPM_SINGLE_PACKAGE)
Option B (stricter/reproducible): require a lockfile
If you want reproducible builds, commit a package-lock.json. Until then, you can have CI generate one but still fail so you remember to commit it later:

yaml
Copy code
- bash: |
    set -eo pipefail
    npm config set ${NPM_SCOPE}:registry "https://npm.cloudsmith.io/${CS_WORKSPACE}/${CS_REPO}/"
    npm config set //npm.cloudsmith.io/${CS_WORKSPACE}/${CS_REPO}/:_authToken="${CLOUDSMITH_API_KEY}"

    if [ ! -f package-lock.json ] && [ ! -f npm-shrinkwrap.json ]; then
      echo "No lockfile detected. Generating a temporary one for this run..."
      npm install --package-lock-only
      echo "❌ Please commit the generated package-lock.json for reproducible builds."
      exit 1
    fi

    npm ci
  displayName: "npm (enforce lockfile)"
  env:
    CS_WORKSPACE: $(CS_WORKSPACE)
    CS_REPO: $(CS_REPO)
    CLOUDSMITH_API_KEY: $(CLOUDSMITH_API_KEY)
    NPM_SCOPE: $(NPM_SCOPE)
