trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  CS_ORG: 'globex-innovations'
  CS_REPO: 'acme-nonprod'
  CS_SERVICE_SLUG: 'ci_acme_service'

steps:
- task: Bash@3
  displayName: 'Print OIDC provider URL'
  inputs:
    targetType: 'inline'
    script: |
      echo "System OIDC Provider URL:"
      echo "$(System.OidcRequestUri)"
      echo ""
      echo "Full provider URL with API version:"
      echo "$(System.OidcRequestUri)?api-version=7.1"

- task: Bash@3
  displayName: 'Mint Cloudsmith OIDC token (masked)'
  env:
    CS_ORG: $(CS_ORG)
    CS_SERVICE_SLUG: $(CS_SERVICE_SLUG)
  inputs:
    targetType: 'inline'
    script: |
      # 1) Request ADO OIDC token
      AZURE_DEVOPS_OIDC_TOKEN=$(curl -s -X POST \
        -H "Content-Length: 0" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $(System.AccessToken)" \
        "$(System.OidcRequestUri)?api-version=7.1" | jq -r '.oidcToken')

      echo "Minted ADO OIDC token (length): ${#AZURE_DEVOPS_OIDC_TOKEN}"

      # 2) Exchange for Cloudsmith ephemeral token
      CSM_TOKEN=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "{\"oidc_token\":\"$AZURE_DEVOPS_OIDC_TOKEN\", \"service_slug\":\"$CS_SERVICE_SLUG\"}" \
        "https://api.cloudsmith.io/openid/${CS_ORG}/" | jq -r '.token')

      if [ -z "$CSM_TOKEN" ] || [ "$CSM_TOKEN" = "null" ]; then
        echo "Failed to obtain Cloudsmith token"; exit 1
      fi

      # Mask token in logs and export to variable
      echo "##vso[task.setsecret]$CSM_TOKEN"
      echo "##vso[task.setvariable variable=CSM_TOKEN;issecret=true]$CSM_TOKEN"
      echo "Cloudsmith token minted successfully."


